{"version":3,"sources":["components/Todo/Nav/index.tsx","components/Todo/TodoList/index.tsx","components/Todo/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Nav","onTitleClick","onAdd","useState","navTitleIndex","setNavTitleIndex","inputRef","useRef","onTitleClicked","useCallback","preState","onAddBtnClicked","val","current","value","trim","length","todoItem","key","Date","now","content","completed","onKeyDown","e","keyCode","hideInput","inputElement","className","type","placeholder","ref","onClick","TodoList","list","onChange","title","emptyContent","reverse","onDelete","slice","onClear","event","index","Number","currentTarget","dataset","emptyElement","Boolean","map","item","i","defaultChecked","todoListReducer","state","action","findIndex","target","indexs","itemToDel","push","newState","includes","Todo","activedTitle","completedTitle","useReducer","todoList","todoListDispatch","activedList","setActivedList","completedList","setCompletedList","completedNum","setCompletedNum","isShowComp","setIsShowComp","useEffect","listener","localStorage","setItem","JSON","stringify","window","addEventListener","removeEventListener","savedListStr","getItem","savedList","parse","console","log","acti","filter","compNum","onCompletedChange","element","elementList","activeElement","listElement","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70b3b60c.chunk.js","sourcesContent":["import { FC, ReactElement, useCallback, useRef, useState } from 'react';\r\nimport { ITodoItem } from '../typings';\r\nimport './index.css';\r\n\r\n\r\ninterface IProps {\r\n    onTitleClick: () => void;\r\n    onAdd: (todoItem: ITodoItem) => void;\r\n}\r\n\r\n\r\nconst Nav: FC<IProps> = ({\r\n    onTitleClick,\r\n    onAdd\r\n}): ReactElement => {\r\n\r\n    const navTitles = ['Todo List', 'Done List'];\r\n    const [navTitleIndex, setNavTitleIndex] = useState(0);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const onTitleClicked = useCallback(() => {\r\n        setNavTitleIndex(preState => (preState + 1) % 2);\r\n        onTitleClick();\r\n    }, [onTitleClick]);\r\n\r\n    const onAddBtnClicked = useCallback(() => {\r\n        const val: string = inputRef.current!.value.trim();\r\n        if (val.length) {\r\n            const todoItem: ITodoItem = {\r\n                key: Date.now(),\r\n                content: val,\r\n                completed: false\r\n            };\r\n            onAdd(todoItem);\r\n            inputRef.current!.value = '';\r\n        }\r\n    }, [onAdd]);\r\n\r\n    const onKeyDown = useCallback(e => {\r\n        if (e.keyCode === 13) {\r\n            onAddBtnClicked();\r\n        }\r\n    }, [onAddBtnClicked]);\r\n\r\n    const hideInput = navTitleIndex > 0;\r\n    const inputElement = <>\r\n        <input className={`nav-input${hideInput ? ' hide' : ''}`} type=\"text\" placeholder=\"请输入内容...\" ref={inputRef} onKeyDown={onKeyDown} />\r\n        <button className={`nav-add-btn${hideInput ? ' hide' : ''}`} onClick={onAddBtnClicked}></button>\r\n    </>;\r\n\r\n    return (\r\n        <div className=\"nav\">\r\n            <span className=\"nav-title\" onClick={onTitleClicked}>{navTitles[navTitleIndex]}</span>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nav;","import {FC, useCallback} from 'react';\r\nimport { ITodoItem } from '../typings';\r\nimport './index.css';\r\n\r\ninterface IProps {\r\n    list: ITodoItem[];\r\n    onChange: (element: ITodoItem) => void;\r\n    title?: string;\r\n    emptyContent?: string;\r\n    reverse?: boolean;\r\n    onDelete?: (elementList: ITodoItem[]) => void;\r\n}\r\n\r\nconst TodoList: FC<IProps> = ({\r\n    list,\r\n    onChange,\r\n    title,\r\n    emptyContent = '无',\r\n    reverse,\r\n    onDelete,\r\n}) => {\r\n\r\n    if (reverse) list = list.slice().reverse();\r\n\r\n    const onClear = useCallback(() => {\r\n        onDelete!(list);\r\n    }, [onDelete, list]);\r\n    \r\n    const onClick = useCallback(event => {\r\n        const index: number = Number(event.currentTarget.dataset.index);\r\n        onChange(list[index]);\r\n    }, [onChange, list]);\r\n    \r\n    const emptyElement = <div className=\"empty\">{emptyContent}</div>;\r\n    \r\n    if (!list.length) return emptyElement;\r\n    return (\r\n        <div className=\"todo-list\">\r\n            {(Boolean(title) || onDelete) &&\r\n                <div className=\"todo-title\">\r\n                    <span>{title || '未命名标题'}</span>\r\n                    {onDelete && <button className=\"clear-btn\" onClick={onClear}>清空</button>}\r\n                </div>\r\n            }\r\n            {list.map((item, i) => (\r\n                <li className=\"todo-item\" key={item.key} data-index={i} onClick={onClick}>\r\n                    <input type=\"checkbox\" defaultChecked={item.completed} />\r\n                    <span className={`todo-item-text${item.completed ? ' completed' : ''}`}>{item.content}</span>\r\n                </li>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import { FC, ReactElement, useCallback, useEffect, useReducer, useState } from 'react';\r\nimport './index.css';\r\nimport Nav from './Nav';\r\nimport TodoList from './TodoList';\r\nimport { ITodoItem } from './typings';\r\n\r\ninterface IProps {\r\n    activedTitle?: string;\r\n    completedTitle?: string;\r\n    emptyContent?: string;\r\n}\r\n\r\ntype TodoListAction = {\r\n    type: string\r\n    val: ITodoItem[]\r\n};\r\n\r\nconst todoListReducer = (state: ITodoItem[], action: TodoListAction): ITodoItem[] => {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return [...state, ...action.val];\r\n        case 'change':\r\n            const index = state.findIndex(item => item === action.val[0]);\r\n            const target = { ...state[index] };\r\n            target.completed = !target.completed;\r\n            return [...state.slice(0, index), target, ...state.slice(index + 1)];\r\n        case 'delete':\r\n            const indexs = [];\r\n            for (const itemToDel of action.val) {\r\n                const index = state.findIndex(item => item === itemToDel);\r\n                indexs.push(index);\r\n            }\r\n            const newState: ITodoItem[] = [];\r\n            for (let i = 0; i < state.length; i++) {\r\n                if (indexs.includes(i)) continue;\r\n                newState.push(state[i]);\r\n            }\r\n            return newState;\r\n        case 'clear':\r\n            if (state.length) return [];\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return state;\r\n};\r\n\r\nconst Todo: FC<IProps> = ({\r\n    activedTitle = '代办',\r\n    completedTitle = '已完成',\r\n    emptyContent = '无'\r\n}): ReactElement => {\r\n\r\n    const [todoList, todoListDispatch] = useReducer(todoListReducer, []);\r\n    const [activedList, setActivedList] = useState<ITodoItem[]>([]);\r\n    const [completedList, setCompletedList] = useState<ITodoItem[]>([]);\r\n    const [completedNum, setCompletedNum] = useState(0);\r\n    const [isShowComp, setIsShowComp] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const listener = (e: any) => {\r\n            localStorage.setItem('todoList', JSON.stringify(todoList));\r\n        };\r\n        window.addEventListener('beforeunload', listener);\r\n        return () => {\r\n            window.removeEventListener('beforeunload', listener);\r\n        };\r\n    }, [todoList]);\r\n\r\n    useEffect(() => {    \r\n        const savedListStr = localStorage.getItem('todoList');\r\n        let savedList: ITodoItem[] = [];\r\n        if (savedListStr) savedList = JSON.parse(savedListStr);\r\n        console.log(savedList);\r\n        todoListDispatch({ type: 'clear', val: [] });\r\n        if (savedList.length) todoListDispatch({ type: 'add', val: savedList });\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        const acti = todoList.filter(item => !item.completed);\r\n        setActivedList(acti);\r\n        const compNum = todoList.length - acti.length;\r\n        setCompletedNum(compNum);\r\n    }, [todoList]);\r\n\r\n    useEffect(() => {\r\n        if (completedList.length !== completedNum) {\r\n            setCompletedList(todoList.filter(item => item.completed));\r\n        }\r\n    }, [todoList, completedList, completedNum]);\r\n\r\n    const onTitleClick = useCallback(() => {\r\n        setIsShowComp(preState => !preState);\r\n    }, []);\r\n\r\n    const onAdd = useCallback((todoItem: ITodoItem) => {\r\n        todoListDispatch({ type: 'add', val: [todoItem] });\r\n    }, []);\r\n\r\n    const onCompletedChange = useCallback((element: ITodoItem) => {\r\n        todoListDispatch({ type: 'change', val: [element] });\r\n    }, []);\r\n\r\n    const onDelete = useCallback((elementList: ITodoItem[]) => {\r\n        todoListDispatch({ type: 'delete', val: elementList });\r\n    }, []);\r\n\r\n    const activeElement = <TodoList title={activedTitle} emptyContent={emptyContent} list={activedList} reverse onChange={onCompletedChange} />;\r\n    const completeElement = <TodoList title={completedTitle} emptyContent={emptyContent} list={completedList} onChange={onCompletedChange} onDelete={onDelete} />;\r\n    const listElement = isShowComp ? completeElement : activeElement;\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <Nav onTitleClick={onTitleClick} onAdd={onAdd} />\r\n            {listElement}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;","import {FC, ReactElement} from 'react';\nimport './App.css';\nimport Todo from './components/Todo';\n\nconst App: FC = (): ReactElement => {\n  return (\n    <div className=\"app\">\n      <Todo emptyContent=\"什么都没有(●'◡'●)\" />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}