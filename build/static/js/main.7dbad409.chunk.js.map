{"version":3,"sources":["components/Todo/Nav/index.tsx","components/Todo/Nav/indexHooks.ts","components/Todo/TodoList/index.tsx","components/Todo/TodoList/indexHooks.ts","components/Todo/indexHooks.ts","components/Todo/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","onAdd","isHide","inputRef","useRef","onAddBtnClicked","useCallback","val","current","value","trim","length","todoItem","key","Date","now","content","completed","onKeyDown","e","keyCode","useInputElementInit","className","type","placeholder","ref","onClick","Nav","title","hideInput","onTitleClick","TodoList","list","emptyContent","reverse","deleteButtonText","onChange","onDelete","sortedList","slice","onClear","event","index","target","dataset","isEmpty","showHeader","Boolean","useTodoListInit","map","item","i","defaultChecked","todoListReducer","state","action","findIndex","indexs","itemToDel","push","newState","includes","useTodoInit","listModes","initialTodoList","useReducer","todoList","todoListDispatch","activatedList","useMemo","filter","useEffect","localStorage","setItem","JSON","stringify","setCompletedNum","completedListInit","useState","completedList","setCompletedList","completedNum","useTodoListState","defaultValue","getItem","parse","useLocalStorage","lists","dispatch","navTitles","hideInputs","forEach","navTitle","canInput","setIndex","preIndex","TodoListChooser","titles","emptyContents","reverses","canClears","deleteButtonTexts","listTitle","canClear","element","elementList","useTodoListChooserInit","undefined","Todo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7dbad409.chunk.js","sourcesContent":["import { FC, ReactElement } from 'react';\r\nimport { TodoItemType } from '../indexTypes';\r\nimport { useInputElementInit } from './indexHooks';\r\nimport './index.css';\r\n\r\ninterface INavProps {\r\n    title: string;\r\n    hideInput?: boolean;\r\n    onTitleClick: () => void;\r\n    onAdd: (todoItem: TodoItemType) => void;\r\n}\r\n\r\ninterface IInputProps {\r\n    onAdd: INavProps['onAdd'];\r\n    isHide?: boolean;\r\n}\r\n\r\nconst Nav: FC<INavProps> = ({\r\n    title,\r\n    hideInput = false,\r\n    onTitleClick,\r\n    onAdd\r\n}): ReactElement => (\r\n    <div className=\"nav\">\r\n        <span className=\"nav-title\" onClick={() => onTitleClick()}>{title}</span>\r\n        <Input isHide={hideInput} onAdd={onAdd} />\r\n    </div>\r\n);\r\n\r\nconst Input: FC<IInputProps> = ({\r\n    onAdd,\r\n    isHide = true\r\n}): ReactElement => {\r\n\r\n    // initialize inputElement\r\n    const [inputRef, onKeyDown, onAddBtnClicked] = useInputElementInit(onAdd);\r\n\r\n    return (\r\n        <>\r\n            <input className={`nav-input${ isHide ? ' hide' : '' }`} type=\"text\" placeholder=\"请输入内容...\" ref={inputRef} onKeyDown={onKeyDown} />\r\n            <button className={`nav-add-btn${ isHide ? ' hide' : '' }`} onClick={onAddBtnClicked}></button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React, { useCallback, useRef } from \"react\";\r\nimport { TodoItemType } from \"../indexTypes\";\r\n\r\nfunction useInputElementInit (onAdd: (todoItem: TodoItemType) => void): [React.RefObject<HTMLInputElement>, typeof onKeyDown, typeof onAddBtnClicked] {\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const onAddBtnClicked = useCallback(() => {\r\n        const val: string = inputRef.current!.value.trim();\r\n        if (val.length) {\r\n            const todoItem: TodoItemType = {\r\n                key: Date.now(),\r\n                content: val,\r\n                completed: false\r\n            };\r\n            onAdd(todoItem);\r\n            inputRef.current!.value = '';\r\n        }\r\n    }, [onAdd]);\r\n\r\n    const onKeyDown = useCallback(e => {\r\n        if (e.keyCode === 13) onAddBtnClicked();\r\n    }, [onAddBtnClicked]);\r\n    \r\n    return [inputRef, onKeyDown, onAddBtnClicked];\r\n}\r\n\r\nexport {\r\n    useInputElementInit\r\n};","import { FC } from 'react';\r\nimport { TodoItemType } from '../indexTypes';\r\nimport { useTodoListInit } from './indexHooks';\r\nimport './index.css';\r\n\r\ninterface IProps {\r\n    list: TodoItemType[];\r\n    onChange: (element: TodoItemType) => void;\r\n    title?: string;\r\n    emptyContent?: string;\r\n    reverse?: boolean;\r\n    deleteButtonText?: string;\r\n    onDelete?: (elementList: TodoItemType[]) => void;\r\n}\r\n\r\nconst TodoList: FC<IProps> = ({\r\n    title,\r\n    list,\r\n    emptyContent = '无',\r\n    reverse,\r\n    deleteButtonText = '清空',\r\n    onChange,\r\n    onDelete\r\n}) => {\r\n\r\n    const { isEmpty, showHeader, sortedList, onClear, onClick } = useTodoListInit(title, list, reverse, onChange, onDelete);\r\n\r\n    const emptyElement = <div className=\"empty\">{emptyContent}</div>;\r\n\r\n    if (isEmpty) return emptyElement;\r\n    return (\r\n        <div className=\"todo-list\" onClick={onClick}>\r\n            {showHeader &&\r\n                <div className=\"todo-title\">\r\n                    <span>{title || '未命名标题'}</span>\r\n                    {onDelete && <button className=\"clear-btn\" onClick={onClear}>{deleteButtonText}</button>}\r\n                </div>\r\n            }\r\n            {sortedList.map((item, i) => (\r\n                <li className=\"todo-item\" key={item.key} data-index={i}>\r\n                    <input type=\"checkbox\" defaultChecked={item.completed} />\r\n                    <span className={`todo-item-text${ item.completed ? ' completed' : '' }`}>{item.content}</span>\r\n                </li>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import { useCallback } from \"react\";\r\nimport { TodoItemType } from \"../indexTypes\";\r\n\r\nfunction useTodoListInit(\r\n    title: string | undefined,\r\n    list: TodoItemType[],\r\n    reverse: boolean | undefined,\r\n    onChange: (todoItem: TodoItemType) => void,\r\n    onDelete: ((elementList: TodoItemType[]) => void) | undefined\r\n) {\r\n\r\n    let sortedList = list;\r\n    if (reverse) sortedList = list.slice().reverse();\r\n\r\n    const onClear = useCallback(() => {\r\n        onDelete!(sortedList);\r\n    }, [onDelete, sortedList]);\r\n\r\n    const onClick = useCallback(event => {\r\n        const { index } = event.target.dataset;\r\n        if (typeof index === 'undefined') return;\r\n        onChange(sortedList[index]);\r\n    }, [onChange, sortedList]);\r\n\r\n    return { isEmpty: list.length === 0, showHeader: Boolean(title) || onDelete, sortedList, onClear, onClick };\r\n}\r\n\r\nexport {\r\n    useTodoListInit\r\n};","import React, { useCallback, useEffect, useMemo, useReducer, useState } from \"react\";\r\nimport { TodoItemType, TodoListAction, TodoListModeType } from \"./indexTypes\";\r\n\r\n\r\nfunction useLocalStorage<T>(key: string, defaultValue: T): T {\r\n    const value = useMemo(() => {\r\n        const value = localStorage.getItem(key);\r\n        if (value === null) return null;\r\n        return JSON.parse(value);\r\n    }, [key]);\r\n    if (value === null) return defaultValue;\r\n    return value;\r\n}\r\n\r\n\r\nfunction useTodoListState(initialTodoList: TodoItemType[]): [TodoItemType[][], React.Dispatch<TodoListAction>] {\r\n    // todoList, initialized by savedList\r\n    const [todoList, todoListDispatch] = useReducer(todoListReducer, initialTodoList);\r\n\r\n    // activatedList, computed from todoList\r\n    const activatedList = useMemo(() => todoList.filter(item => !item.completed), [todoList]);\r\n\r\n    // when todoList updated, save it to localStorage\r\n    // and update completedNum\r\n    useEffect(() => {\r\n        localStorage.setItem('todoList', JSON.stringify(todoList));\r\n        setCompletedNum(todoList.length - activatedList.length);\r\n    }, [todoList, activatedList]);\r\n\r\n    // completedList\r\n    const completedListInit = useMemo(() => initialTodoList.filter(item => item.completed), [initialTodoList]);\r\n    const [completedList, setCompletedList] = useState<TodoItemType[]>(completedListInit);\r\n    const [completedNum, setCompletedNum] = useState(completedList.length);\r\n    useEffect(() => {\r\n        if (completedList.length === completedNum) return;\r\n        setCompletedList(todoList.filter(item => item.completed));\r\n    }, [todoList, completedList, completedNum]);\r\n\r\n    return [[activatedList, completedList], todoListDispatch];\r\n}\r\n\r\nfunction todoListReducer(state: TodoItemType[], action: TodoListAction): TodoItemType[] {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return [...state, ...action.val];\r\n        case 'change':\r\n            const index = state.findIndex(item => item === action.val[0]);\r\n            const target = { ...state[index] };\r\n            target.completed = !target.completed;\r\n            return [...state.slice(0, index), target, ...state.slice(index + 1)];\r\n        case 'delete':\r\n            const indexs = [];\r\n            for (const itemToDel of action.val) {\r\n                const index = state.findIndex(item => item === itemToDel);\r\n                indexs.push(index);\r\n            }\r\n            const newState: TodoItemType[] = [];\r\n            for (let i = 0; i < state.length; i++) {\r\n                if (indexs.includes(i)) continue;\r\n                newState.push(state[i]);\r\n            }\r\n            return newState;\r\n        case 'clear':\r\n            if (state.length) return [];\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return state;\r\n};\r\n\r\n\r\nfunction useTodoInit(listModes: TodoListModeType[]) {\r\n\r\n    // savedList, which saved in localStorage. Only run once\r\n    const savedList = useLocalStorage<TodoItemType[]>('todoList', []);\r\n\r\n    // get activatedList, completedList and todoListDispatch from todoListState which initialized by savedList\r\n    const [lists, dispatch] = useTodoListState(savedList);\r\n    const onAdd = useCallback((todoItem: TodoItemType) => {\r\n        dispatch({ type: 'add', val: [todoItem] });\r\n    }, [dispatch]);\r\n\r\n    const [navTitles, hideInputs] = useMemo(() => {\r\n        const navTitles: string[] = [], hideInputs: boolean[] = [];\r\n        listModes.forEach(({ navTitle = '未命名标题', canInput = true }) => {\r\n            navTitles.push(navTitle);\r\n            hideInputs.push(!canInput);\r\n        });\r\n        return [navTitles, hideInputs];\r\n    }, [listModes]);\r\n\r\n    const [index, setIndex] = useState(0);\r\n    const onTitleClick = useCallback(() => {\r\n        setIndex(preIndex => (preIndex + 1) % navTitles.length);\r\n    }, [setIndex, navTitles]);\r\n\r\n    return { index, navTitle: navTitles[index], hideInput: hideInputs[index], lists, onTitleClick, onAdd, dispatch };\r\n}\r\n\r\n\r\nfunction useTodoListChooserInit(listModes: TodoListModeType[], todoListDispatch: React.Dispatch<TodoListAction>) {\r\n\r\n    const [titles, emptyContents, reverses, canClears, deleteButtonTexts] = useMemo(() => {\r\n        const titles: string[] = [], emptyContents: string[] = [], reverses: boolean[] = [];\r\n        const canClears: boolean[] = [], deleteButtonTexts: string[] = [];\r\n        listModes.forEach(({ listTitle = '未命名标题', emptyContent = '无', reverse = false, canClear = true, deleteButtonText = '清空' }) => {\r\n            titles.push(listTitle);\r\n            emptyContents.push(emptyContent);\r\n            reverses.push(reverse);\r\n            canClears.push(canClear);\r\n            deleteButtonTexts.push(deleteButtonText);\r\n        });\r\n        return [titles, emptyContents, reverses, canClears, deleteButtonTexts];\r\n    }, [listModes]);\r\n\r\n    const onChange = useCallback((element: TodoItemType) => {\r\n        todoListDispatch({ type: 'change', val: [element] });\r\n    }, [todoListDispatch]);\r\n\r\n    const onDelete = useCallback((elementList: TodoItemType[]) => {\r\n        todoListDispatch({ type: 'delete', val: elementList });\r\n    }, [todoListDispatch]);\r\n\r\n    return { titles, emptyContents, reverses, canClears, deleteButtonTexts, onChange, onDelete };\r\n}\r\n\r\n\r\nexport {\r\n    useTodoInit,\r\n    useTodoListChooserInit\r\n};","import { FC, ReactElement } from 'react';\r\nimport './index.css';\r\nimport Nav from './Nav';\r\nimport TodoList from './TodoList';\r\nimport { TodoItemType, TodoListAction, TodoListModeType } from './indexTypes';\r\nimport { useTodoInit, useTodoListChooserInit } from './indexHooks';\r\n\r\ninterface ITodoProps {\r\n    listModes: TodoListModeType[];\r\n}\r\n\r\ninterface ITodoListChooserProps {\r\n    listModes: TodoListModeType[];\r\n    lists: TodoItemType[][];\r\n    dispatch: React.Dispatch<TodoListAction>;\r\n    index?: number;\r\n}\r\n\r\nconst Todo: FC<ITodoProps> = ({\r\n    listModes = []\r\n}): ReactElement => {\r\n\r\n    const {\r\n        index,\r\n        navTitle,\r\n        hideInput,\r\n        lists,\r\n        dispatch,\r\n        onTitleClick,\r\n        onAdd\r\n    } = useTodoInit(listModes);\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <Nav {...{ title: navTitle, hideInput, onTitleClick, onAdd }} />\r\n            <TodoListChooser {...{ listModes, lists, dispatch, index }} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst TodoListChooser: FC<ITodoListChooserProps> = ({\r\n    listModes,\r\n    lists,\r\n    dispatch,\r\n    index = 0\r\n}): ReactElement => {\r\n\r\n    const { titles, emptyContents, reverses, canClears, deleteButtonTexts, onChange, onDelete } = useTodoListChooserInit(listModes, dispatch);\r\n\r\n    const todoListElements = (() => titles.map((title, i) => (\r\n        <TodoList {...{\r\n            title,\r\n            list: lists[i],\r\n            emptyContent: emptyContents[i],\r\n            reverse: reverses[i],\r\n            deleteButtonText: deleteButtonTexts[i],\r\n            onChange,\r\n            onDelete: canClears[i] ? onDelete : undefined\r\n        }} />\r\n    )))();\r\n    \r\n    return todoListElements[index];\r\n};\r\n\r\nexport default Todo;\r\nexport type { TodoListModeType };","import { FC, ReactElement, useMemo } from 'react';\nimport './App.css';\nimport Todo, { TodoListModeType } from './components/Todo';\n\nconst App: FC = (): ReactElement => {\n  const listModes = useMemo((): TodoListModeType[] => [\n    {\n      navTitle: 'Todo List',\n      listTitle: '待办',\n      emptyContent: \"什么待办都没有(●'◡'●)\",\n      reverse: true,\n      canClear: false,\n    },\n    {\n      navTitle: 'Done List',\n      listTitle: '已完成',\n      emptyContent: \"什么都没有完成(●'◡'●)\",\n      canInput: false,\n    }\n  ], []);                        \n\n  return (\n    <div className=\"app\">\n      <Todo listModes={listModes} />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}