{"version":3,"sources":["components/Todo/Nav/index.tsx","components/Todo/Nav/indexHooks.ts","components/Todo/TodoList/index.tsx","components/Todo/TodoList/indexHooks.ts","components/Todo/indexHooks.ts","hooks/common.ts","components/Todo/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","onAdd","isHide","inputRef","useRef","onAddBtnClicked","val","current","value","trim","length","todoItem","key","Date","now","content","completed","e","keyCode","useInputElementInit","onKeyDown","className","type","placeholder","ref","onClick","Nav","title","hideInput","onTitleClick","TodoList","list","emptyContent","reverse","deleteButtonText","onChange","onDelete","sortedList","slice","isEmpty","showHeader","Boolean","onClear","event","index","Number","currentTarget","dataset","useTodoListInit","map","item","i","defaultChecked","todoListReducer","state","action","findIndex","target","indexs","itemToDel","push","newState","includes","useTodoInit","listModes","initialTodoList","useReducer","todoList","todoListDispatch","activatedList","filter","useEffect","localStorage","setItem","JSON","stringify","setCompletedNum","completedListInit","useState","completedList","setCompletedList","completedNum","useTodoListState","defaultValue","getItem","parse","useLocalStorage","lists","dispatch","useCallback","useMemo","navTitles","hideInputs","forEach","navTitle","canInput","setIndex","preIndex","Todo","TodoListChooser","titles","emptyContents","reverses","canClears","deleteButtonTexts","listTitle","canClear","element","elementList","useTodoListChooserInit","undefined","TodoWithInit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SA6BMA,EAAyB,SAAC,GAGX,IAFjBC,EAEgB,EAFhBA,MAEgB,IADhBC,cACgB,SAGhB,EChCJ,SACID,GAOA,IAAME,EAAWC,iBAAyB,MAEpCC,EAAkB,WACpB,IAAMC,EAAcH,EAASI,QAASC,MAAMC,OAC5C,GAAIH,EAAII,OAAQ,CACZ,IAAMC,EAAyB,CAC3BC,IAAKC,KAAKC,MACVC,QAAST,EACTU,WAAW,GAEff,EAAMU,GACNR,EAASI,QAASC,MAAQ,KAMlC,MAAO,CAACL,EAFU,SAACc,GAAD,OAA0B,KAAdA,EAAEC,SAAkBb,KAErBA,GDOkBc,CAAoBlB,GAAnE,mBAAOE,EAAP,KAAiBiB,EAAjB,KAA4Bf,EAA5B,KAEA,OACI,qCACI,uBAAOgB,UAAS,mBAAenB,EAAS,QAAU,IAAOoB,KAAK,OAAOC,YAAY,oCAAWC,IAAKrB,EAAUiB,UAAWA,IACtH,wBAAQC,UAAS,qBAAiBnB,EAAS,QAAU,IAAOuB,QAASpB,QAKlEqB,EA5BY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MADuB,IAEvBC,iBAFuB,SAGvBC,EAHuB,EAGvBA,aACA5B,EAJuB,EAIvBA,MAJuB,OAMvB,sBAAKoB,UAAU,MAAf,UACI,sBAAMA,UAAU,YAAYI,QAAS,kBAAMI,KAA3C,SAA4DF,IAC5D,cAAC,EAAD,CAAOzB,OAAQ0B,EAAW3B,MAAOA,Q,UEuB1B6B,EAjCc,SAAC,GAQvB,IAPHH,EAOE,EAPFA,MACAI,EAME,EANFA,KAME,IALFC,oBAKE,MALa,SAKb,EAJFC,EAIE,EAJFA,QAIE,IAHFC,wBAGE,MAHiB,eAGjB,EAFFC,EAEE,EAFFA,SACAC,EACE,EADFA,SAGA,ECvBJ,SACIT,EACAI,EACAE,EACAE,EACAC,GAGA,IAAIC,EAAaN,EAUjB,OATIE,IAASI,EAAaN,EAAKO,QAAQL,WAShC,CAAEM,QAA+B,IAAtBF,EAAW3B,OAAc8B,WAAYC,QAAQd,IAAUS,EAAUC,aAAYK,QAP/E,kBAAMN,EAAUC,IAOwEZ,QALxF,SAACkB,GACb,IAAMC,EAAgBC,OAAOF,EAAMG,cAAcC,QAAQH,OACzDT,EAASE,EAAWO,MDQsCI,CAAgBrB,EAAOI,EAAME,EAASE,EAAUC,GAAtGG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WAAYH,EAA7B,EAA6BA,WAAYK,EAAzC,EAAyCA,QAASjB,EAAlD,EAAkDA,QAIlD,OAAIc,EAFiB,qBAAKlB,UAAU,QAAf,SAAwBW,IAIzC,sBAAKX,UAAU,YAAf,UACKmB,GACG,sBAAKnB,UAAU,aAAf,UACI,+BAAOM,GAAS,mCACfS,GAAY,wBAAQf,UAAU,YAAYI,QAASiB,EAAvC,SAAiDR,OAGrEG,EAAWY,KAAI,SAACC,EAAMC,GAAP,OACZ,qBAAI9B,UAAU,YAA2B,aAAY8B,EAAG1B,QAASA,EAAjE,UACI,uBAAOH,KAAK,WAAW8B,eAAgBF,EAAKlC,YAC5C,sBAAMK,UAAS,wBAAoB6B,EAAKlC,UAAY,aAAe,IAAnE,SAA2EkC,EAAKnC,YAFrDmC,EAAKtC,Y,qBERpD,SAASyC,EAAgBC,EAAuBC,GAC5C,OAAQA,EAAOjC,MACX,IAAK,MACD,MAAM,GAAN,mBAAWgC,GAAX,YAAqBC,EAAOjD,MAChC,IAAK,SACD,IAAMsC,EAAQU,EAAME,WAAU,SAAAN,GAAI,OAAIA,IAASK,EAAOjD,IAAI,MACpDmD,EAAM,eAAQH,EAAMV,IAE1B,OADAa,EAAOzC,WAAayC,EAAOzC,UACrB,GAAN,mBAAWsC,EAAMhB,MAAM,EAAGM,IAA1B,CAAkCa,GAAlC,YAA6CH,EAAMhB,MAAMM,EAAQ,KACrE,IAAK,SACD,IADJ,EACUc,EAAS,GADnB,cAE4BH,EAAOjD,KAFnC,yBAEeqD,EAFf,QAGcf,EAAQU,EAAME,WAAU,SAAAN,GAAI,OAAIA,IAASS,KAC/CD,EAAOE,KAAKhB,IAFhB,2BAAqC,IAFzC,8BAOI,IADA,IAAMiB,EAA2B,GACxBV,EAAI,EAAGA,EAAIG,EAAM5C,OAAQyC,IAC1BO,EAAOI,SAASX,IACpBU,EAASD,KAAKN,EAAMH,IAExB,OAAOU,EACX,IAAK,QACD,GAAIP,EAAM5C,OAAQ,MAAO,GAKjC,OAAO4C,EAIX,SAASS,EAAYC,GAGjB,IAGA,EA/DJ,SAA0BC,GAEtB,MAAqCC,qBAAWb,EAAiBY,GAAjE,mBAAOE,EAAP,KAAiBC,EAAjB,KAGMC,EAAgBF,EAASG,QAAO,SAAApB,GAAI,OAAKA,EAAKlC,aAIpDuD,qBAAU,WACNC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUR,IAChDS,EAAgBT,EAASzD,OAAS2D,EAAc3D,UACjD,CAACyD,EAAUE,IAGd,IAAMQ,EAAoBZ,EAAgBK,QAAO,SAAApB,GAAI,OAAIA,EAAKlC,aAC9D,EAA0C8D,mBAAyBD,GAAnE,mBAAOE,EAAP,KAAsBC,EAAtB,KACA,EAAwCF,mBAASC,EAAcrE,QAA/D,mBAAOuE,EAAP,KAAqBL,EAArB,KAMA,OALAL,qBAAU,WACFQ,EAAcrE,SAAWuE,GAC7BD,EAAiBb,EAASG,QAAO,SAAApB,GAAI,OAAIA,EAAKlC,gBAC/C,CAACmD,EAAUY,EAAeE,IAEtB,CAAC,CAACZ,EAAeU,GAAgBX,GAwCdc,CCpE9B,SAA4BtE,EAAauE,GACrC,IAAM3E,EAAQgE,aAAaY,QAAQxE,GACnC,OAAc,OAAVJ,EAAuB2E,EACpBT,KAAKW,MAAM7E,GD8DA8E,CAAgC,WAAY,KAG9D,mBAAOC,EAAP,KAAcC,EAAd,KACMvF,EAAQwF,uBAAY,SAAC9E,GACvB6E,EAAS,CAAElE,KAAM,MAAOhB,IAAK,CAACK,OAC/B,CAAC6E,IAEJ,EAAgCE,mBAAQ,WACpC,IAAMC,EAAsB,GAAIC,EAAwB,GAKxD,OAJA5B,EAAU6B,SAAQ,YAA8C,IAAD,IAA1CC,gBAA0C,MAA/B,iCAA+B,MAAtBC,gBAAsB,SAC3DJ,EAAU/B,KAAKkC,GACfF,EAAWhC,MAAMmC,MAEd,CAACJ,EAAWC,KACpB,CAAC5B,IAPJ,mBAAO2B,EAAP,KAAkBC,EAAlB,KASA,EAA0Bd,mBAAS,GAAnC,mBAAOlC,EAAP,KAAcoD,EAAd,KACMnE,EAAe4D,uBAAY,WAC7BO,GAAS,SAAAC,GAAQ,OAAKA,EAAW,GAAKN,EAAUjF,YACjD,CAACsF,EAAUL,IAEd,MAAO,CAAE/C,QAAOkD,SAAUH,EAAU/C,GAAQhB,UAAWgE,EAAWhD,GAAQ2C,QAAO1D,eAAc5B,QAAOuF,YErE1G,IAAMU,EAAuB,SAAC,GAET,IAAD,IADhBlC,iBACgB,MADJ,GACI,EAChB,EAQID,EAAYC,GAPZpB,EADJ,EACIA,MACAkD,EAFJ,EAEIA,SACAlE,EAHJ,EAGIA,UACA2D,EAJJ,EAIIA,MACAC,EALJ,EAKIA,SACA3D,EANJ,EAMIA,aACA5B,EAPJ,EAOIA,MAGJ,OACI,sBAAKoB,UAAU,OAAf,UACI,cAAC,EAAD,CAAWM,MAAOmE,EAAUlE,YAAWC,eAAc5B,UACrD,cAAC,EAAD,CAAuB+D,YAAWuB,QAAOC,WAAU5C,cAKzDuD,EAA6C,SAAC,GAK/B,IAJjBnC,EAIgB,EAJhBA,UACAuB,EAGgB,EAHhBA,MACAC,EAEgB,EAFhBA,SAEgB,IADhB5C,aACgB,MADR,EACQ,EAEhB,EF6CJ,SAAgCoB,EAA+BI,GAE3D,MAAwEsB,mBAAQ,WAC5E,IAAMU,EAAmB,GAAIC,EAA0B,GAAIC,EAAsB,GAC3EC,EAAuB,GAAIC,EAA8B,GAQ/D,OAPAxC,EAAU6B,SAAQ,YAA6G,IAAD,IAAzGY,iBAAyG,MAA7F,iCAA6F,MAApFzE,oBAAoF,MAArE,SAAqE,MAAhEC,eAAgE,aAA/CyE,gBAA+C,aAA9BxE,wBAA8B,MAAX,eAAW,EAC1HkE,EAAOxC,KAAK6C,GACZJ,EAAczC,KAAK5B,GACnBsE,EAAS1C,KAAK3B,GACdsE,EAAU3C,KAAK8C,GACfF,EAAkB5C,KAAK1B,MAEpB,CAACkE,EAAQC,EAAeC,EAAUC,EAAWC,KACrD,CAACxC,IAXJ,mBAiBA,MAAO,CAAEoC,OAjBT,KAiBiBC,cAjBjB,KAiBgCC,SAjBhC,KAiB0CC,UAjB1C,KAiBqDC,kBAjBrD,KAiBwErE,SAJvD,SAACwE,GAAD,OAA2BvC,EAAiB,CAAE9C,KAAM,SAAUhB,IAAK,CAACqG,MAIHvE,SAFjE,SAACwE,GAAD,OAAiCxC,EAAiB,CAAE9C,KAAM,SAAUhB,IAAKsG,MEtDtFC,CAAuB7C,EAAWwB,GAPlCY,EADJ,EACIA,OACAC,EAFJ,EAEIA,cACAC,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,UACAC,EALJ,EAKIA,kBACArE,EANJ,EAMIA,SACAC,EAPJ,EAOIA,SAeJ,OAZgCgE,EAAOnD,KAAI,SAACtB,EAAOwB,GAAR,OACvC,cAAC,EAAD,CACIxB,MAAOA,EACPI,KAAMwD,EAAMpC,GACZnB,aAAcqE,EAAclD,GAC5BlB,QAASqE,EAASnD,GAClBjB,iBAAkBsE,EAAkBrD,GACpChB,SAAUA,EACVC,SAAUmE,EAAUpD,GAAKf,OAAW0E,OAIpBlE,IAGfmE,EAAe,WAiBxB,OAAO,cAAC,EAAD,CAAM/C,UAhBK,CACd,CACI8B,SAAU,YACVW,UAAW,eACXzE,aAAc,mEACdC,SAAS,EACTyE,UAAU,GAEd,CACIZ,SAAU,YACVW,UAAW,qBACXzE,aAAc,mEACd+D,UAAU,OCxEPiB,EAPC,kBACZ,qBAAK3F,UAAU,MAAf,SAEI,cAAC,EAAD,OCMO4F,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.7ef26281.chunk.js","sourcesContent":["import { FC, ReactElement } from 'react';\nimport { TodoItemType } from '../indexTypes';\nimport { useInputElementInit } from './indexHooks';\nimport './index.css';\n\ninterface INavProps {\n    title: string;\n    hideInput?: boolean;\n    onTitleClick: () => void;\n    onAdd: (todoItem: TodoItemType) => void;\n}\n\ninterface IInputProps {\n    onAdd: INavProps['onAdd'];\n    isHide?: boolean;\n}\n\nconst Nav: FC<INavProps> = ({\n    title,\n    hideInput = false,\n    onTitleClick,\n    onAdd\n}): ReactElement => (\n    <div className=\"nav\">\n        <span className=\"nav-title\" onClick={() => onTitleClick()}>{title}</span>\n        <Input isHide={hideInput} onAdd={onAdd} />\n    </div>\n);\n\nconst Input: FC<IInputProps> = ({\n    onAdd,\n    isHide = true\n}): ReactElement => {\n\n    // initialize inputElement\n    const [inputRef, onKeyDown, onAddBtnClicked] = useInputElementInit(onAdd);\n\n    return (\n        <>\n            <input className={`nav-input${ isHide ? ' hide' : '' }`} type=\"text\" placeholder=\"请输入内容...\" ref={inputRef} onKeyDown={onKeyDown} />\n            <button className={`nav-add-btn${ isHide ? ' hide' : '' }`} onClick={onAddBtnClicked}></button>\n        </>\n    );\n};\n\nexport default Nav;","import React, { useRef } from \"react\";\nimport { TodoItemType } from \"../indexTypes\";\n\nfunction useInputElementInit (\n    onAdd: (todoItem: TodoItemType) => void\n): [\n    React.RefObject<HTMLInputElement>,\n    typeof onKeyDown,\n    typeof onAddBtnClicked\n] {\n\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const onAddBtnClicked = () => {\n        const val: string = inputRef.current!.value.trim();\n        if (val.length) {\n            const todoItem: TodoItemType = {\n                key: Date.now(),\n                content: val,\n                completed: false\n            };\n            onAdd(todoItem);\n            inputRef.current!.value = '';\n        }\n    };\n\n    const onKeyDown = (e: any) => e.keyCode === 13 && onAddBtnClicked();\n    \n    return [inputRef, onKeyDown, onAddBtnClicked];\n}\n\nexport {\n    useInputElementInit\n};","import { FC } from 'react';\nimport { TodoItemType } from '../indexTypes';\nimport { useTodoListInit } from './indexHooks';\nimport './index.css';\n\ninterface IProps {\n    list: TodoItemType[];\n    onChange: (element: TodoItemType) => void;\n    title?: string;\n    emptyContent?: string;\n    reverse?: boolean;\n    deleteButtonText?: string;\n    onDelete?: (elementList: TodoItemType[]) => void;\n}\n\nconst TodoList: FC<IProps> = ({\n    title,\n    list,\n    emptyContent = '无',\n    reverse,\n    deleteButtonText = '清空',\n    onChange,\n    onDelete\n}) => {\n\n    const { isEmpty, showHeader, sortedList, onClear, onClick } = useTodoListInit(title, list, reverse, onChange, onDelete);\n\n    const emptyElement = <div className=\"empty\">{emptyContent}</div>;\n\n    if (isEmpty) return emptyElement;\n    return (\n        <div className=\"todo-list\">\n            {showHeader &&\n                <div className=\"todo-title\">\n                    <span>{title || '未命名标题'}</span>\n                    {onDelete && <button className=\"clear-btn\" onClick={onClear}>{deleteButtonText}</button>}\n                </div>\n            }\n            {sortedList.map((item, i) => (\n                <li className=\"todo-item\" key={item.key} data-index={i} onClick={onClick}>\n                    <input type=\"checkbox\" defaultChecked={item.completed} />\n                    <span className={`todo-item-text${ item.completed ? ' completed' : '' }`}>{item.content}</span>\n                </li>\n            ))}\n        </div>\n    );\n};\n\nexport default TodoList;","import { TodoItemType } from \"../indexTypes\";\n\nfunction useTodoListInit(\n    title: string | undefined,\n    list: TodoItemType[],\n    reverse: boolean | undefined,\n    onChange: (todoItem: TodoItemType) => void,\n    onDelete: ((elementList: TodoItemType[]) => void) | undefined\n) {\n\n    let sortedList = list;\n    if (reverse) sortedList = list.slice().reverse();\n\n    const onClear = () => onDelete!(sortedList);\n\n    const onClick = (event: any) => {\n        const index: number = Number(event.currentTarget.dataset.index);\n        onChange(sortedList[index]);\n    }\n\n    return { isEmpty: sortedList.length === 0, showHeader: Boolean(title) || onDelete, sortedList, onClear, onClick };\n}\n\nexport {\n    useTodoListInit\n};\n","import React, { useCallback, useEffect, useMemo, useReducer, useState } from \"react\";\nimport { useLocalStorage } from \"../../hooks/common\";\nimport { TodoItemType, TodoListAction, TodoListModeType } from \"./indexTypes\";\n\n\nfunction useTodoListState(initialTodoList: TodoItemType[]): [TodoItemType[][], React.Dispatch<TodoListAction>] {\n    // todoList, initialized by savedList\n    const [todoList, todoListDispatch] = useReducer(todoListReducer, initialTodoList);\n\n    // activatedList, computed from todoList\n    const activatedList = todoList.filter(item => !item.completed);\n\n    // when todoList updated, save it to localStorage\n    // and update completedNum\n    useEffect(() => {\n        localStorage.setItem('todoList', JSON.stringify(todoList));\n        setCompletedNum(todoList.length - activatedList.length);\n    }, [todoList, activatedList]);\n\n    // completedList\n    const completedListInit = initialTodoList.filter(item => item.completed);\n    const [completedList, setCompletedList] = useState<TodoItemType[]>(completedListInit);\n    const [completedNum, setCompletedNum] = useState(completedList.length);\n    useEffect(() => {\n        if (completedList.length === completedNum) return;\n        setCompletedList(todoList.filter(item => item.completed));\n    }, [todoList, completedList, completedNum]);\n\n    return [[activatedList, completedList], todoListDispatch];\n}\n\nfunction todoListReducer(state: TodoItemType[], action: TodoListAction): TodoItemType[] {\n    switch (action.type) {\n        case 'add':\n            return [...state, ...action.val];\n        case 'change':\n            const index = state.findIndex(item => item === action.val[0]);\n            const target = { ...state[index] };\n            target.completed = !target.completed;\n            return [...state.slice(0, index), target, ...state.slice(index + 1)];\n        case 'delete':\n            const indexs = [];\n            for (const itemToDel of action.val) {\n                const index = state.findIndex(item => item === itemToDel);\n                indexs.push(index);\n            }\n            const newState: TodoItemType[] = [];\n            for (let i = 0; i < state.length; i++) {\n                if (indexs.includes(i)) continue;\n                newState.push(state[i]);\n            }\n            return newState;\n        case 'clear':\n            if (state.length) return [];\n            break;\n        default:\n            break;\n    }\n    return state;\n};\n\n\nfunction useTodoInit(listModes: TodoListModeType[]) {\n\n    // savedList, which saved in localStorage. Only run once\n    const savedList = useLocalStorage<TodoItemType[]>('todoList', []);\n\n    // get activatedList, completedList and todoListDispatch from todoListState which initialized by savedList\n    const [lists, dispatch] = useTodoListState(savedList);\n    const onAdd = useCallback((todoItem: TodoItemType) => {\n        dispatch({ type: 'add', val: [todoItem] });\n    }, [dispatch]);\n\n    const [navTitles, hideInputs] = useMemo(() => {\n        const navTitles: string[] = [], hideInputs: boolean[] = [];\n        listModes.forEach(({ navTitle = '未命名标题', canInput = true }) => {\n            navTitles.push(navTitle);\n            hideInputs.push(!canInput);\n        });\n        return [navTitles, hideInputs];\n    }, [listModes]);\n\n    const [index, setIndex] = useState(0);\n    const onTitleClick = useCallback(() => {\n        setIndex(preIndex => (preIndex + 1) % navTitles.length);\n    }, [setIndex, navTitles]);\n\n    return { index, navTitle: navTitles[index], hideInput: hideInputs[index], lists, onTitleClick, onAdd, dispatch };\n}\n\n\nfunction useTodoListChooserInit(listModes: TodoListModeType[], todoListDispatch: React.Dispatch<TodoListAction>) {\n\n    const [titles, emptyContents, reverses, canClears, deleteButtonTexts] = useMemo(() => {\n        const titles: string[] = [], emptyContents: string[] = [], reverses: boolean[] = [];\n        const canClears: boolean[] = [], deleteButtonTexts: string[] = [];\n        listModes.forEach(({ listTitle = '未命名标题', emptyContent = '无', reverse = false, canClear = true, deleteButtonText = '清空' }) => {\n            titles.push(listTitle);\n            emptyContents.push(emptyContent);\n            reverses.push(reverse);\n            canClears.push(canClear);\n            deleteButtonTexts.push(deleteButtonText);\n        });\n        return [titles, emptyContents, reverses, canClears, deleteButtonTexts];\n    }, [listModes]);\n\n    const onChange = (element: TodoItemType) => todoListDispatch({ type: 'change', val: [element] });\n\n    const onDelete = (elementList: TodoItemType[]) => todoListDispatch({ type: 'delete', val: elementList });\n\n    return { titles, emptyContents, reverses, canClears, deleteButtonTexts, onChange, onDelete };\n}\n\n\nexport {\n    useTodoInit,\n    useTodoListChooserInit\n};","function useLocalStorage<T>(key: string, defaultValue: T): T {\n    const value = localStorage.getItem(key);\n    if (value === null) return defaultValue;\n    return JSON.parse(value);\n}\n\nexport {\n    useLocalStorage,\n};","import { FC, ReactElement } from 'react';\nimport './index.css';\nimport Nav from './Nav';\nimport TodoList from './TodoList';\nimport { TodoItemType, TodoListAction, TodoListModeType } from './indexTypes';\nimport { useTodoInit, useTodoListChooserInit } from './indexHooks';\n\ninterface ITodoProps {\n    listModes: TodoListModeType[];\n}\n\ninterface ITodoListChooserProps {\n    listModes: TodoListModeType[];\n    lists: TodoItemType[][];\n    dispatch: React.Dispatch<TodoListAction>;\n    index?: number;\n}\n\nconst Todo: FC<ITodoProps> = ({\n    listModes = []\n}): ReactElement => {\n    const {\n        index,\n        navTitle,\n        hideInput,\n        lists,\n        dispatch,\n        onTitleClick,\n        onAdd\n    } = useTodoInit(listModes);\n\n    return (\n        <div className=\"todo\">\n            <Nav {...{ title: navTitle, hideInput, onTitleClick, onAdd }} />\n            <TodoListChooser {...{ listModes, lists, dispatch, index }} />\n        </div>\n    );\n};\n\nconst TodoListChooser: FC<ITodoListChooserProps> = ({\n    listModes,\n    lists,\n    dispatch,\n    index = 0\n}): ReactElement => {\n\n    const {\n        titles,\n        emptyContents,\n        reverses,\n        canClears,\n        deleteButtonTexts,\n        onChange,\n        onDelete\n    } = useTodoListChooserInit(listModes, dispatch);\n\n    const todoListElements = (() => titles.map((title, i) => (\n        <TodoList\n            title={title}\n            list={lists[i]}\n            emptyContent={emptyContents[i]}\n            reverse={reverses[i]}\n            deleteButtonText={deleteButtonTexts[i]}\n            onChange={onChange}\n            onDelete={canClears[i] ? onDelete : undefined}\n        />\n    )))();\n    \n    return todoListElements[index];\n};\n\nexport const TodoWithInit = (): ReactElement => {\n    const listModes = [\n        {\n            navTitle: 'Todo List',\n            listTitle: '待办',\n            emptyContent: \"什么待办都没有(●'◡'●)\",\n            reverse: true,\n            canClear: false,\n        },\n        {\n            navTitle: 'Done List',\n            listTitle: '已完成',\n            emptyContent: \"什么都没有完成(●'◡'●)\",\n            canInput: false,\n        },\n    ];\n\n    return <Todo listModes={listModes} />;\n}\n\nexport default Todo;\nexport type { TodoListModeType };","import { FC, ReactElement } from 'react';\nimport './App.css';\n// import ImageStitcher from './components/ImageStitcher';\nimport { TodoWithInit } from './components/Todo';\n\nconst App: FC = (): ReactElement => (\n    <div className=\"app\">\n        {/* <ImageStitcher /> */}\n        <TodoWithInit />\n    </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}